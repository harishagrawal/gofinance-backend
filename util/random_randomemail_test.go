// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calc using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Testing RandomEmail with valid parameter
  Details:
    Description: This test is meant to check if the function RandomEmail correctly generates a unique random email of given string length. The email should always end with "@email.com", the prefix should be randomly generated string of given length.
  Execution:
    Arrange: No data arrangement is needed for this scenario.
    Act: Invoke the RandomEmail function with a valid number, like 10.
    Assert: Assert that the returned string has the length 10 characters for the prefix and additional 11 for "@email.com", namely 21. Also, Assert that the returned string end with "@email.com".
  Validation:
    The function should return an string with the randomly generated 10 characters plus "@email.com". The importance of this test is to verify if the function is correctly generating the email with the given number.

Scenario 2: Testing RandomEmail with 0 as parameter
  Details:
    Description: This test is meant to check if the function RandomEmail correctly generates an email with no prefix but still contain "@email.com". The number parameter is given as 0.
  Execution:
    Arrange: No data arrangement is needed for this scenario.
    Act: Invoke the RandomEmail function with 0 as the number.
    Assert: Assert that the returned string equals to "@email.com".
  Validation:
    The function should return a string with only "@email.com". This test verifies that the function is working properly even with a zero-length prefix.

Scenario 3: Negative scenario
  Details:
    Description: This test is meant to check if the function RandomEmail behaves properly when passed negative numbers.
  Execution:
    Arrange: No data arrangement is needed for this scenario.
    Act: Invoke the RandomEmail function with -10.
    Assert: Assert that the function throws an error because the given number is negative.
  Validation:
    Negative numbers might not be expected for this function and should cause it to throw an error or behave unexpectedly. By running this test case, we are ensuring that the function behaves properly even when it receives bad input.

*/

// ********RoostGPT********
package util

import (
	"fmt"
	"math/rand"
	"strings"
	"testing"
	"time"
)

// RandomString generates a random string of the given length
func RandomString(length int) string {
	rand.Seed(time.Now().UnixNano())
	bytes := make([]byte, length)
	for i := 0; i < length; i++ {
		bytes[i] = byte(65 + rand.Intn(25)) // A=65 and Z = 65+25
	}
	return string(bytes)
}

// RandomEmail generates an email with a local part of the given length
func RandomEmail(number int) string {
	if number < 0 {
		fmt.Errorf("Length must be greater or equal to 0")
		return ""
	}
	return fmt.Sprintf("%s@email.com", RandomString(number))
}

// TestRandomEmail is the unit test for the RandomEmail function
func TestRandomEmail(t *testing.T) {
	// Array of test scenarios
	var testCases = []struct {
		input    int  // input to the function
		expected int  // expected output from the function
		err      bool // whether an error is expected
	}{
		{10, 21, false},
		{0, 11, false},
		{-10, 0, true},
	}

	// Perform test for each scenario
	for _, tc := range testCases {
		t.Run(fmt.Sprintf("Test number %d", tc.input), func(t *testing.T) {
			// Call the function
			res := RandomEmail(tc.input)

			if tc.err && res != "" {
				t.Fatal("Expected an error but didn't get one")
			}
			
			if !tc.err && res == "" {
				t.Fatalf("Expected an email but got '%s'", res)
			}
			
			// Assert that the length of the email equals to the expected length
			if len(res) != tc.expected && res != "" {
				t.Fatalf("Expected length of '%d' but got '%d'", tc.expected, len(res))
			} 

			// Assert that the email ends with '@email.com'
			if !strings.HasSuffix(res, "@email.com") && res != "" {
				t.Fatal("Returned email does not end with '@email.com'")
			}
		})
	}
}
