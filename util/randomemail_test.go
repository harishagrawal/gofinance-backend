// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Random Email Generation Test

  Details:
    Description: This test is meant to check if the RandomEmail function is behaving as expected. It is supposed to generate a random email from a string with a specific length.
  
  Execution:
    Arrange: We don't need any specific data, mocks, or test doubles for this test.
    Act: Invoke RandomEmail with a known integer, such as 10.
    Assert: The returned email should be a string of length 10 + length of "@email.com". The string should also contain "@email.com".

  Validation:
    The validity of the assertion is based on the expected behavior of the RandomEmail function - it should produce a string of certain character length and end with "@email.com". The test is important in verifying that the system is generating emails with the correct format and character length.

Scenario 2: Edge Case for Zero characters Test

  Details:
    Description: This test checks how the function behaves when asked to generate a zero-character-length string. 

  Execution:
    Arrange: No specific arrangement needed.
    Act: Invoke RandomEmail with 0.
    Assert: The function should produce "@email.com".

  Validation:
    Assert logic is based on the fact that RandomString would generate an empty string with length 0, so the final email should only contain "@email.com". This test ensures that even when the function faces extreme input, it still behaves as expected.

Scenario 3: Edge Case for Negative characters Test

  Details:
    Description: This test checks if the function behaves correctly when passed a negative number as the string length.

  Execution:
    Arrange: No specific arrangement needed.
    Act: Invoke RandomEmail with a negative integer, like -10.
    Assert: The outcomes for this test could be dependent on the RandomString function. If it handles negative inputs well, by converting them to positive, then we expect a valid random email with positive length, otherwise, it might lead to an error.

  Validation:
    We expect the RandomEmail function to handle such edge cases gracefully. If not, it indicates that proper input validation should be added to prevent such occurrences. This test is important in ensuring that our system withstands negative inputs.
*/

// ********RoostGPT********
package util

import (
	"strings"
	"testing"
)

func Testrandomemail(t *testing.T) {
	var tests = []struct {
		name   string
		length int
		want   string
	}{
		{"Random Email Generation Test", 10, "10 characters + @email.com"},
		{"Edge Case for Zero characters Test", 0, "@email.com"},
		{"Edge Case For Negative characters Test", -10, "10 characters + @email.com/path"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := RandomEmail(tt.length)
			if len(got) != len(tt.want) || !strings.HasSuffix(got, "@email.com") {
				t.Errorf("RandomEmail(%v): got %v, want %v", tt.length, got, tt.want)
			} else {
				t.Logf("Test scenario successful for length: ", tt.length)
			}
		})
	}
}
