// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calc using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Test RandomEmail with a valid positive integer
  ```
  Details:
    Description: This test is meant to verify that the RandomEmail function generates a valid random email of a certain length when a positive integer is given for the length parameter.
  Execution:
    Arrange: Pass a valid positive integer to the function.
    Act: Invoke RandomEmail with the given positive integer.
    Assert: Verify that the returned string matches the expected email format, and has the correct length.
  Validation:
    Since we are testing for the successful generation of a random email, we expect the returned string to match the email format and the correct length. This test is pertinent to ensure the functionality and integrity of the RandomEmail function.
  ```

Scenario 2: Test RandomEmail with zero as an input
  ```
  Details:
    Description: This test checks how the function deals with zero as an input. Since strings can be empty, we can have an email address that only contains "@email.com".
  Execution:
    Arrange: Pass zero as an argument to the function.
    Act: Invoke RandomEmail with the integer zero.
    Assert: Check that the returned string is "@email.com".
  Validation:
    In this scenario, we expect the function to return "@email.com" as strings can be empty. It is associated with functionality and validity of RandomEmail function.
  ```

Scenario 3: Test RandomEmail with negative integer
  ```
  Details:
    Description: This test is meant to verify the behavior of the function when a negative integer is given as an argument. Since the length of an email cannot be negative, the function should return an error or handle this appropriately.
  Execution:
    Arrange: Pass a negative integer to the function.
    Act: Invoke RandomEmail with the negative integer.
    Assert: Since the RandomEmail function doesn't specify any error return if a negative integer is passed, it should be able to handle it and might return a string with just "@email.com".
  Validation:
    We do not expect the function to crash or fail in the event of a negative integer input. The function should be able to handle this and return a valid email structure. This is important for the overall robustness and reliability of the function.
  ```

Scenario 4: Test RandomEmail with a large number as an input
  ```
  Details:
    Description: The goal of the test is to check the performance and functionality of the RandomEmail function when a very large integer is given as an argument.
  Execution:
    Arrange: Pass a very large integer to the function.
    Act: Invoke RandomEmail with the large integer.
    Assert: Verify that the returned string matches the expected email format and has the correct length.
  Validation:
    Despite the large size of the argument, we expect the function to successfully generate a random email of correct length and format. This test is necessary to ensure that the function works as expected under extreme conditions.
  ```

*/

// ********RoostGPT********
package util_test

import (
	"testing"
	"math/rand"
	"time"
	"regexp"
	"errors"

	"github.com/your_project_directory/util"
)

var (
	InvalidLengthEmailError = errors.New("invalid length for email")
	ERR_EMAIL_TOO_LONG = fmt.Sprintf("@email.com")
)

func TestRandomEmail(t *testing.T) {
	// Seed for number generation by rand
	rand.Seed(time.Now().UnixNano())

	EMAIL_REGEXP := `^[A-Za-z0-9]+@email.com$`

	cases := []struct {
		number   int
		expected string
		err      error
	}{
		{5, EMAIL_REGEXP, nil},
		{0, "@email.com", nil},
		{-1, "@email.com", nil},
		{10000, ERR_EMAIL_TOO_LONG, InvalidLengthEmailError},
	}

	for _, c := range cases {
		email, err := util.RandomEmail(c.number)
		if c.err != nil {
			if errors.Is(err, c.err) {
				if email != c.expected {
					t.Errorf("RandomEmail(%d) == %q, expected %q", c.number, email, c.expected)
				}
			} else {
				t.Errorf("RandomEmail(%d) produced an unexpected error: %s", c.number, err)
			}
		} else if err != nil {
			t.Errorf("RandomEmail(%d) produced an unexpected error: %s", c.number, err)
		} else if !regexp.MustCompile(c.expected).MatchString(email) {
			t.Errorf("RandomEmail(%d) == %q, does not match format %q", c.number, email, c.expected)
		}
		t.Logf("RandomEmail(%d) executed without errors", c.number)
	}
}
